{"version":3,"sources":["navtop.jsx","navbot.jsx","body.jsx","sortingAlgorithms.js","App.js","index.js"],"names":["generateModes","innerHTML","id","NavTop","state","generationType","arraySize","handleGenerationTypeToggle","generationType_","setState","handleArraySizeChange","event","target","value","handleGenerate","props","onReset","className","onGenerationTypeToggle","this","onArraySizeChange","onGenerate","Component","Title","style","backgroundColor","GenerationType","map","mode","key","type","autoComplete","onClick","ArraySize","width","name","min","max","defaultValue","onChange","Generate","sortTypes","NavBot","onSortSpeedChange","onSortTypeToggle","sortType","sortSpeed","onSortToggle","sorting","sortState","SortType","SortSpeed","Sort","Info","comparisons","accesses","Body","array","windowWidth","left","Math","right","entry","indexOf","length","margin","color","height","sort","steps","forEach","element","SORTED_ARRAY_COLOR","UNSORTED_ARRAY_COLOR","resetColor","i","r","rr","finished","VALUE_MOVED_ARRAY_COLOR","VALUE_ACCESSED_ARRAY_COLOR","bubbleSort","insertionSort","low","selectionSort","splits","pivot","j","diff","splice","quickSort","n","l","slice","item","shift","mergeSort","push","radixSort","App","interval","runningTick","run","clearInterval","floor","resetArray","temp","index","randomIntFromInterval","variation","log","rand","console","num","ceil","changeSettings","handleSortTypeToggle","sortType_","resetArrayColor","handleSortSpeedChange","pow","handleSortToggle","setInterval","window","addEventListener","resize","bind","innerWidth","Fragment","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34b93527.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './style.css';\r\n\r\nconst generateModes = [\r\n {innerHTML: \"Random\", id: 'random'},\r\n {innerHTML: \"Reversed\", id: 'reversed'},\r\n {innerHTML: \"Nearly Sorted\", id: 'nearlySorted'},\r\n {innerHTML: \"Few Unique\", id: 'fewUnique'}\r\n]\r\n\r\nexport default class NavTop extends Component {\r\n\r\n  state = {\r\n    generationType: 'random',\r\n    arraySize: 100\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <nav className=\"navbar navbar-light navbar-expand-lg\">\r\n        <Title />\r\n        <GenerationType onGenerationTypeToggle={this.handleGenerationTypeToggle} generationType={this.state.generationType}/>\r\n        <ArraySize onArraySizeChange={this.handleArraySizeChange} arraySize={this.state.arraySize}/>\r\n        <Generate onGenerate={this.handleGenerate}/>\r\n      </nav>\r\n    )\r\n  }\r\n\r\n  handleGenerationTypeToggle = (generationType_) => {\r\n    const generationType = generationType_;\r\n    this.setState({ generationType });\r\n  }\r\n\r\n  handleArraySizeChange = (event) => {\r\n    const arraySize = event.target.value;\r\n    this.setState({ arraySize });\r\n  }\r\n\r\n  handleGenerate = () => {\r\n    this.props.onReset(this.state.generationType, this.state.arraySize);\r\n  }\r\n\r\n}\r\n\r\nclass Title extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"group\" style={{backgroundColor: '#FFDEAD'}}>\r\n        <h1>Sorting Sandbox</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass GenerationType extends Component {\r\n  render () {\r\n    const {generationType, onGenerationTypeToggle} = this.props;\r\n    return (\r\n      <div className=\"nav group\">\r\n        <h4>Generation Types: </h4>\r\n        <div className=\"btn-group btn-group-toggle m-2\">{\r\n          generateModes.map(mode => (\r\n            <label key={mode.id} className={mode.id === generationType ? \"btn btn-primary active\" : \"btn btn-primary\"}>\r\n              <input type=\"radio\" id={mode.id} autoComplete=\"off\" onClick={() => onGenerationTypeToggle(mode.id)}/>{mode.innerHTML}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass ArraySize extends Component {\r\n  render () {\r\n    const {arraySize, onArraySizeChange} = this.props;\r\n    return (\r\n      <div className=\"nav group\">\r\n        <h4 style={{width: 150}}>Array Size: {arraySize}</h4>\r\n        <input className=\"m-2\" type=\"range\" name=\"range\" min={20} max={1000} defaultValue={arraySize} onChange={(value) => onArraySizeChange(value)} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Generate extends Component {\r\n  render () {\r\n    const {onGenerate} = this.props;\r\n    return (\r\n      <button className=\"btn btn-md btn-primary m-2\" onClick={onGenerate}>Generate</button>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style.css';\r\n\r\nconst sortTypes = [\r\n {innerHTML: \"Bubble Sort\", id: 'bubble'},\r\n {innerHTML: \"Insertion Sort\", id: 'insertion'},\r\n {innerHTML: \"Selection Sort\", id: 'selection'},\r\n {innerHTML: \"Quick Sort\", id: 'quick'},\r\n {innerHTML: \"Merge Sort\", id: 'merge'},\r\n {innerHTML: \"Radix Sort\", id: 'radix'}\r\n]\r\n\r\nexport default class NavBot extends Component {\r\n  render () {\r\n    const {onSortSpeedChange, onSortTypeToggle, sortType, sortSpeed, onSortToggle, sorting, sortState} = this.props;\r\n    return (\r\n      <nav className=\"navbar navbar-light navbar-expand-lg\">\r\n        <SortType onSortTypeToggle={onSortTypeToggle} sortType={sortType} />\r\n        <SortSpeed onSortSpeedChange={onSortSpeedChange} sortSpeed={sortSpeed} />\r\n        <Sort onSortToggle={onSortToggle} sorting={sorting} />\r\n        <Info sortState={sortState} />\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nclass SortType extends Component {\r\n  render () {\r\n    const {sortType, onSortTypeToggle} = this.props;\r\n    return (\r\n      <div className=\"nav group\">\r\n        <h4>Algorithm: </h4>\r\n        <div className=\"btn-group btn-group-toggle m-2\">{\r\n          sortTypes.map(type => (\r\n            <label key={type.id} className={type.id === sortType ? \"btn btn-primary active\" : \"btn btn-primary\"}>\r\n              <input type=\"radio\" id={type.id} autoComplete=\"off\" onClick={() => onSortTypeToggle(type.id)}/>{type.innerHTML}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass SortSpeed extends Component {\r\n  render () {\r\n    const {onSortSpeedChange, sortSpeed} = this.props;\r\n    return (\r\n      <div className=\"nav group\">\r\n        <h4 style={{width: 150}}>Sort Speed: {sortSpeed}</h4>\r\n        <input className=\"m-2\" type=\"range\" name=\"range\" min={1} max={1000} defaultValue={sortSpeed} onChange={(event) => onSortSpeedChange(event)} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Sort extends Component {\r\n  render () {\r\n    const {onSortToggle, sorting} = this.props;\r\n    return (\r\n      <div style={{width: 100}}><button className=\"btn btn-md btn-primary m-2\" onClick={onSortToggle}>{sorting ? \"Pause\" : \"Sort\"}</button></div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Info extends Component {\r\n  render () {\r\n    const {sortState} = this.props;\r\n    let comparisons = 0, accesses = 0;\r\n    if (sortState !== null) {\r\n      comparisons = sortState.comparisons;\r\n      accesses = sortState.accesses;\r\n    }\r\n    return (\r\n      <div style={{width: 155}}>\r\n        <h6>Comparisons: {comparisons}</h6>\r\n        <h6>Accesses: {accesses}</h6>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style.css';\r\n\r\nexport default class Body extends Component {\r\n\r\n\r\n  render () {\r\n    const { array, windowWidth } = this.props;\r\n    return (\r\n      <div className=\"array-container\" style={{left: Math.max(.15 * windowWidth, 207), right: Math.max(.15 * windowWidth, 207)}}>{\r\n        array.map((entry) => (\r\n          <div\r\n            key={array.indexOf(entry)}\r\n            className=\"array-bar-container\"\r\n            style={\r\n              array.length <= 200 ? {width: 80 / array.length + '%', margin: 10 / array.length + '%'} : {width: 90 / array.length + '%'}\r\n            }\r\n            ><div\r\n              className=\"array-bar\"\r\n              style={{\r\n                backgroundColor: entry.color,\r\n                height: entry.value / array.length * 100 + '%'\r\n              }}\r\n              ></div>\r\n          </div>\r\n        ))}</div>\r\n    )\r\n  }\r\n\r\n}\r\n","import {UNSORTED_ARRAY_COLOR, SORTED_ARRAY_COLOR, VALUE_MOVED_ARRAY_COLOR, VALUE_ACCESSED_ARRAY_COLOR} from \"./App.js\";\r\n\r\n/*\r\nNOTE:\r\nThe goal of all of these function is to aid in the visualization of the sorting algorithms they represent.\r\nAs such, they aren't accurate to how that sorting algorithm would be used, and the accesses and comparisons\r\ncounter doesn't reflect the comparisons and accesses made in these functions, but rather, the that amount made\r\nwhenever these sorting algorithms are actually used.\r\n*/\r\nexport const sort = function (array, sortType, sortState, steps) {\r\n  resetColor(array);\r\n  switch (sortType) {\r\n    case \"bubble\":\r\n      return bubbleSort(array, sortState, steps);\r\n    case \"insertion\":\r\n      return insertionSort(array, sortState, steps);\r\n    case \"selection\":\r\n      return selectionSort(array, sortState, steps);\r\n    case \"quick\":\r\n      return quickSort(array, sortState, steps);\r\n    case \"merge\":\r\n      return mergeSort(array, sortState, steps);\r\n    case \"radix\":\r\n      return radixSort(array, sortState, steps);\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nfunction resetColor(array) {\r\n  array.forEach(element => {\r\n    if (element.color !== SORTED_ARRAY_COLOR) element.color = UNSORTED_ARRAY_COLOR;\r\n  });\r\n}\r\n\r\n/*\r\nsortState:\r\n- i: current index\r\n- r: index from which to the right everything is exactly sorted\r\n- rr: index from which to the right everything has the chance of being sorted\r\n*/\r\nfunction bubbleSort(array, sortState, steps) {\r\n  if (sortState === null) {\r\n    sortState = {\r\n      i: 0,\r\n      r: array.length - 1,\r\n      rr: 0,\r\n      accesses: 0,\r\n      comparisons: 0,\r\n      finished: false\r\n    }\r\n  }\r\n  if (sortState.finished) return sortState;\r\n\r\n  while (sortState.r !== 0) {\r\n    if (steps === 0) break;\r\n\r\n    sortState.comparisons++;\r\n    if  (array[sortState.i].value > array[sortState.i + 1].value) {\r\n      array[sortState.i].color = VALUE_MOVED_ARRAY_COLOR;\r\n      array[sortState.i + 1].color = VALUE_MOVED_ARRAY_COLOR;\r\n      [array[sortState.i], array[sortState.i + 1]] = [array[sortState.i + 1], array[sortState.i]];\r\n      sortState.accesses += 2;\r\n      steps--;\r\n      sortState.rr = sortState.i + 1;\r\n    } else {\r\n      if (array[sortState.i].color !== VALUE_MOVED_ARRAY_COLOR) array[sortState.i].color = VALUE_ACCESSED_ARRAY_COLOR;\r\n      if (array[sortState.i + 1].color !== VALUE_MOVED_ARRAY_COLOR) array[sortState.i + 1].color = VALUE_ACCESSED_ARRAY_COLOR;\r\n    }\r\n    sortState.i++;\r\n\r\n    if (sortState.i >= sortState.r) {\r\n      for (let i = sortState.rr; i <= sortState.r; i++) {\r\n        array[i].color = SORTED_ARRAY_COLOR;\r\n      }\r\n      sortState.r = sortState.rr;\r\n      sortState.rr = 0;\r\n      sortState.i = 0;\r\n    }\r\n  }\r\n  if (sortState.r === 0) sortState.finished = true;\r\n  return sortState;\r\n}\r\n\r\n/*\r\nsortState:\r\n- i: current index\r\n- r: index from which to the left everything is where new values are being inserted\r\n*/\r\nfunction insertionSort(array, sortState, steps) {\r\n  if (sortState === null) {\r\n    sortState = {\r\n      i: 1,\r\n      r: 1,\r\n      accesses: 0,\r\n      comparisons: 0,\r\n      finished: false\r\n    }\r\n  }\r\n  if (sortState.finished) return sortState;\r\n\r\n  while(sortState.r !== array.length) {\r\n    if (steps === 0) break;\r\n    steps--;\r\n    sortState.comparisons++;\r\n    if (array[sortState.i].value > array[sortState.i - 1].value) {\r\n      if (array[sortState.i].color !== VALUE_MOVED_ARRAY_COLOR) array[sortState.i].color = VALUE_ACCESSED_ARRAY_COLOR;\r\n      sortState.i = ++sortState.r;\r\n    } else {\r\n      [array[sortState.i], array[sortState.i - 1]] = [array[sortState.i - 1], array[sortState.i]];\r\n      array[sortState.i].color = VALUE_MOVED_ARRAY_COLOR;\r\n      array[sortState.i - 1].color = VALUE_MOVED_ARRAY_COLOR;\r\n      sortState.accesses += 2;\r\n      sortState.i--;\r\n    }\r\n    if (sortState.i === 0) {\r\n      sortState.i = ++sortState.r;\r\n    }\r\n  }\r\n\r\n  if (sortState.r === array.length) {\r\n    sortState.finished = true;\r\n    array.forEach(element => {\r\n      element.color = SORTED_ARRAY_COLOR;\r\n    });\r\n  }\r\n  return sortState;\r\n}\r\n\r\n/*\r\nsortState:\r\n- i: current index\r\n- r: index from which to the left everything is Sorted\r\n- low: index of the lowest value right of r that has been detected\r\n*/\r\nfunction selectionSort(array, sortState, steps) {\r\n  if (sortState === null) {\r\n    sortState = {\r\n      i: 0,\r\n      r: 0,\r\n      low: 0,\r\n      accesses: 0,\r\n      comparisons: 0,\r\n      finished: false\r\n    }\r\n  }\r\n  if (sortState.finished) return sortState;\r\n\r\n  while (sortState.r !== array.length) {\r\n    if (steps === 0) break;\r\n    steps--;\r\n    if (sortState.i === array.length) {\r\n      [array[sortState.low], array[sortState.r]] = [array[sortState.r],array[sortState.low]];\r\n      array[sortState.low].color = VALUE_MOVED_ARRAY_COLOR;\r\n      array[sortState.r].color = SORTED_ARRAY_COLOR;\r\n      sortState.accesses += 2;\r\n      sortState.i = sortState.low = ++sortState.r;\r\n    } else {\r\n      sortState.comparisons++;\r\n      if (array[sortState.i].color !== VALUE_MOVED_ARRAY_COLOR) array[sortState.i].color = VALUE_ACCESSED_ARRAY_COLOR;\r\n      if (array[sortState.low].color !== VALUE_MOVED_ARRAY_COLOR) array[sortState.low].color = VALUE_ACCESSED_ARRAY_COLOR;\r\n      if (array[sortState.i].value < array[sortState.low].value) {\r\n        sortState.low = sortState.i;\r\n      }\r\n      sortState.i++;\r\n    }\r\n\r\n  }\r\n  if (sortState.r === array.length) sortState.finished = true;\r\n  return sortState;\r\n}\r\n\r\n/*\r\nsortState:\r\nsplits: array of indexes that mark splits in partitions\r\npivot: pivot\r\nj: current element\r\ni: everything to left < pivot\r\n*/\r\nfunction quickSort(array, sortState, steps) {\r\n  if (sortState === null) {\r\n    sortState = {\r\n      splits: [-1, array.length],\r\n      pivot: array[array.length - 1].value,\r\n      i: 0,\r\n      j: 0,\r\n      accesses: 0,\r\n      comparisons: 0,\r\n      finished: false\r\n    }\r\n  }\r\n  if (sortState.finished) return sortState;\r\n\r\n  while (sortState.splits.length !== 0) {\r\n    if (steps === 0) break;\r\n    steps--;\r\n\r\n    if (sortState.j >= sortState.splits[1] - 1) {\r\n      if (sortState.i === sortState.splits[1]) sortState.i--;\r\n      const diff = sortState.splits[1] - sortState.splits[0];\r\n      if (diff < 3) {\r\n        if (diff > 1) array[sortState.splits[0] + 1].color = SORTED_ARRAY_COLOR;\r\n        sortState.splits.splice(0, 1);\r\n      } else {\r\n        [array[sortState.i], array[sortState.splits[1] - 1]] = [array[sortState.splits[1] - 1], array[sortState.i]];\r\n        array[sortState.splits[1] - 1].color = VALUE_MOVED_ARRAY_COLOR;\r\n        array[sortState.i].color = SORTED_ARRAY_COLOR;\r\n        sortState.accesses += 2;\r\n        if (sortState.i !== 0) {\r\n          sortState.splits.splice(1, 0, sortState.i);\r\n        } else if (array[sortState.i] == array[sortState.splits[1]]){\r\n          sortState.splits.splice(1, 0, sortState.splits[1] - 1)\r\n        }\r\n      }\r\n      if (sortState.splits.length <= 1) break;\r\n      sortState.pivot = array[sortState.splits[1] - 1].value;\r\n      sortState.j = sortState.i = sortState.splits[0] + 1;\r\n      continue;\r\n    }\r\n\r\n    sortState.comparisons++;\r\n    if (array[sortState.j].color !== VALUE_MOVED_ARRAY_COLOR) array[sortState.j].color = VALUE_ACCESSED_ARRAY_COLOR;\r\n    array[sortState.splits[1] - 1].color = VALUE_ACCESSED_ARRAY_COLOR;\r\n    if (array[sortState.j].value <= sortState.pivot) {\r\n      [array[sortState.i], array[sortState.j]] = [array[sortState.j], array[sortState.i]];\r\n      sortState.accesses += 2;\r\n      array[sortState.j].color = array[sortState.i].color = VALUE_MOVED_ARRAY_COLOR;\r\n      sortState.i++;\r\n    }\r\n    sortState.j++;\r\n  }\r\n\r\n  if (sortState.splits.length <= 1) sortState.finished = true;\r\n  return sortState;\r\n}\r\n\r\n/*\r\nsortState:\r\nn: current partition Size\r\ni: current index\r\nl: temp array of left partition\r\nr: temp array of right partition\r\n*/\r\nfunction mergeSort (array, sortState, steps) {\r\n  if (sortState === null) {\r\n    sortState = {\r\n      n: 2,\r\n      i: 0,\r\n      l: [],\r\n      r: [],\r\n      accesses: 0,\r\n      comparisons: 0,\r\n      finished: false\r\n    }\r\n  }\r\n  if (sortState.finished) return sortState;\r\n\r\n  while (sortState.n < array.length * 2) {\r\n    if (steps === 0) break;\r\n    steps--;\r\n\r\n    if (sortState.i === array.length) {\r\n      sortState.n *= 2;\r\n      sortState.i = 0;\r\n    }\r\n    if (sortState.i % sortState.n === 0) {\r\n      sortState.accesses += sortState.n;\r\n      sortState.l = array.slice(sortState.i, sortState.i + sortState.n / 2).map(item => item.value);\r\n      sortState.r = array.slice(sortState.i + sortState.n / 2, Math.min(array.length, sortState.i + sortState.n)).map(item => item.value);\r\n    }\r\n\r\n    sortState.comparisons++;\r\n    sortState.accesses++;\r\n    if (sortState.l.length > 0 && sortState.r.length > 0) {\r\n      if (sortState.l[0] < sortState.r[0]) {\r\n        array[sortState.i].value = sortState.l[0]\r\n        sortState.l.shift();\r\n      } else {\r\n        array[sortState.i].value = sortState.r[0]\r\n        sortState.r.shift();\r\n      }\r\n    } else if (sortState.l.length > 0) {\r\n      array[sortState.i].value = sortState.l[0]\r\n      sortState.l.shift();\r\n    } else {\r\n      array[sortState.i].value = sortState.r[0]\r\n      sortState.r.shift();\r\n    }\r\n    if (sortState.n >= array.length) {\r\n      array[sortState.i].color = SORTED_ARRAY_COLOR;\r\n    } else {\r\n      array[sortState.i].color = VALUE_MOVED_ARRAY_COLOR;\r\n    }\r\n    sortState.i++;\r\n\r\n  }\r\n\r\n  if (sortState.n >= array.length * 2) sortState.finished = true;\r\n  return sortState;\r\n}\r\n\r\n/*\r\nsortState:\r\n\r\n*/\r\nfunction radixSort(array, sortState, steps) {\r\n  if (sortState === null) {\r\n    sortState = {\r\n      l: 0,\r\n      r: array.length,\r\n      n: 2,\r\n      accesses: 0,\r\n      comparisons: 0,\r\n      finished: false\r\n    }\r\n  }\r\n\r\n  while (sortState.n < array.length * 2) {\r\n    if (steps === 0) break;\r\n    steps--;\r\n\r\n    if (sortState.r <= sortState.l) {\r\n      sortState.l = 0;\r\n      sortState.r = array.length;\r\n      sortState.n *= 2;\r\n    }\r\n\r\n    if (array[sortState.l].value % sortState.n < sortState.n / 2) {\r\n      if (sortState.n > array.length) array[sortState.l].color = SORTED_ARRAY_COLOR;\r\n      else array[sortState.l].color = VALUE_ACCESSED_ARRAY_COLOR;\r\n      sortState.l++;\r\n    } else {\r\n      if (sortState.n > array.length) array[sortState.l].color = SORTED_ARRAY_COLOR;\r\n      else array[sortState.l].color = VALUE_MOVED_ARRAY_COLOR;\r\n      array.push(array[sortState.l]);\r\n      array.splice(sortState.l, 1);\r\n      sortState.r--;\r\n      sortState.accesses += array.length - sortState.l;\r\n    }\r\n  }\r\n\r\n  if (sortState.n >= array.length * 2) {\r\n    sortState.finished = true;\r\n    array.forEach(element => element.color = SORTED_ARRAY_COLOR);\r\n  }\r\n  return sortState;\r\n}\r\n","import React, { Component } from 'react';\r\nimport NavTop from './navtop.jsx';\r\nimport NavBot from './navbot.jsx';\r\nimport Body from './body.jsx';\r\nimport './style.css';\r\nimport {sort} from './sortingAlgorithms.js';\r\n\r\nexport const UNSORTED_ARRAY_COLOR = 'turquoise';\r\nexport const SORTED_ARRAY_COLOR = 'green';\r\nexport const VALUE_MOVED_ARRAY_COLOR = 'red';\r\nexport const VALUE_ACCESSED_ARRAY_COLOR = 'orange';\r\n\r\nconst FRAMES_PER_SEC = 60;\r\n\r\n//color\r\n\r\nexport default class App extends Component {\r\n\r\n  state = {\r\n    array: [],\r\n    sortType: 'bubble',\r\n    sortSpeed: 20,\r\n    sorting: false,\r\n    sortState: null,\r\n    windowWidth: 800,\r\n    interval: null,\r\n    runningTick: 0\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.resetArray('random', 100);\r\n    const sorting = false;\r\n    this.setState({sorting});\r\n    window.addEventListener(\"resize\", this.resize.bind(this));\r\n    this.resize();\r\n  }\r\n\r\n  resize() {\r\n    this.setState({windowWidth: window.innerWidth});\r\n  }\r\n\r\n  run = () => {\r\n    if (this.state.sorting && (this.state.sortState === null || !this.state.sortState.finished)) {\r\n      let runningTick = this.state.runningTick + this.state.sortSpeed / FRAMES_PER_SEC;\r\n      if (runningTick > 1) {\r\n        const sortState = sort(this.state.array, this.state.sortType, this.state.sortState, Math.floor(runningTick));\r\n        runningTick -= Math.floor(runningTick);\r\n        this.setState({sortState});\r\n      }\r\n      this.setState({runningTick});\r\n    } else {\r\n      clearInterval(this.state.interval);\r\n      const sorting = false;\r\n      this.setState({sorting});\r\n    }\r\n  }\r\n\r\n  //Cases: 'random', 'reversed', 'nearlySorted', 'fewUnique'\r\n  resetArray = (generationType, arraySize) => {\r\n    const array = [];\r\n    const temp = [];\r\n    switch (generationType) {\r\n      case 'reversed':\r\n        for (let i = arraySize; i > 0; i--) {\r\n          array.push({value: i, color: UNSORTED_ARRAY_COLOR});\r\n        }\r\n        break;\r\n      case 'random':\r\n        for (let i = 1; i <= arraySize; i++) {\r\n          temp.push(i);\r\n        }\r\n        while (temp.length !== 0) {\r\n          const index = randomIntFromInterval(0, temp.length - 1);\r\n          array.push({value: temp[index], color: UNSORTED_ARRAY_COLOR});\r\n          temp.splice(index, 1);\r\n        }\r\n        break;\r\n      case 'nearlySorted':\r\n        for (let i = 1; i <= arraySize; i++) {\r\n          array.push({value: i, color: UNSORTED_ARRAY_COLOR});\r\n        }\r\n        const variation = Math.floor(Math.log(arraySize) / Math.log(2));\r\n        for (let i = 0; i < arraySize; i++) {\r\n          const rand = randomIntFromInterval(Math.max(i - variation, 0), Math.min(i + variation, arraySize - 1));\r\n          [array[i],array[rand]] = [array[rand], array[i]];\r\n        }\r\n        console.log(array);\r\n        break;\r\n      case 'fewUnique':\r\n        const num = Math.log(arraySize) / Math.log(2);\r\n        for (let i = 1; i <= arraySize; i++) {\r\n          temp.push(Math.floor(Math.ceil(i * num / arraySize) * arraySize / num * .9));\r\n        }\r\n        while (temp.length !== 0) {\r\n          const index = randomIntFromInterval(0, temp.length - 1);\r\n          array.push({value: temp[index], color: UNSORTED_ARRAY_COLOR});\r\n          temp.splice(index, 1);\r\n        }\r\n        break;\r\n    }\r\n    this.setState({ array });\r\n    this.changeSettings();\r\n  }\r\n\r\n  handleSortTypeToggle = (sortType_) => {\r\n    if (sortType_ === this.state.sortType) return;\r\n    const sortType = sortType_;\r\n    this.changeSettings();\r\n    this.resetArrayColor();\r\n    this.setState({ sortType });\r\n  }\r\n\r\n  handleSortSpeedChange = (event) => {\r\n    const sortSpeed = Math.ceil(Math.pow(event.target.value / 1000.0, 2) * 1000);\r\n    this.setState({ sortSpeed });\r\n  }\r\n\r\n  handleSortToggle = () => {\r\n    const sorting = !this.state.sorting;\r\n    this.setState({sorting}, () => {\r\n      if (sorting === true) {\r\n        var interval = setInterval(this.run, 1000 / FRAMES_PER_SEC);\r\n        this.setState({interval});\r\n      } else {\r\n        clearInterval(this.state.interval);\r\n        if (this.state.sortSpeed > FRAMES_PER_SEC) {\r\n          const sortState = sort(this.state.array, this.state.sortType, this.state.sortState, 1);\r\n          this.setState({sortState});\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  resetArrayColor = () => {\r\n    const array = this.state.array;\r\n    array.forEach(element => {\r\n      element.color = UNSORTED_ARRAY_COLOR;\r\n    });\r\n    this.setState({array});\r\n  }\r\n\r\n  changeSettings = () => {\r\n    clearInterval(this.state.interval);\r\n    const sorting = false;\r\n    var sortState = null;\r\n    this.setState({ sorting, sortState });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavTop onReset={this.resetArray}/>\r\n        <Body array={this.state.array}\r\n          windowWidth={this.state.windowWidth}\r\n        />\r\n        <NavBot\r\n          onSortTypeToggle={this.handleSortTypeToggle}\r\n          sortType={this.state.sortType}\r\n          onSortSpeedChange={this.handleSortSpeedChange}\r\n          sortSpeed={this.state.sortSpeed}\r\n          sorting={this.state.sorting}\r\n          onSortToggle={this.handleSortToggle}\r\n          sortState={this.state.sortState}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n//inclusive\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\r\nimport App from \"./App\";\n\r\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}